using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace TNRD.SerializableInterface.SourceGenerator
{
    [Generator]
    public class InterfaceSourceGenerator : ISourceGenerator
    {
        /// <inheritdoc />
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new InterfaceSourceGeneratorSyntaxReceiver());
        }

        /// <inheritdoc />
        public void Execute(GeneratorExecutionContext context)
        {
            if (!Debugger.IsAttached)
                Debugger.Launch();
            
            InterfaceSourceGeneratorSyntaxReceiver receiver = (InterfaceSourceGeneratorSyntaxReceiver)context.SyntaxReceiver;
            if (receiver == null)
                return;
            if (!receiver.Generate)
                return;

            string prefix = GeneratorSettings.ClassPrefix;
            string suffix = GeneratorSettings.FilenameSuffix;

            try
            {
                IndentedStringBuilder builder = new IndentedStringBuilder();
                builder.AppendLine("// <auto-generated />");
                BuildUsings(receiver, builder);

                if (!string.IsNullOrEmpty(receiver.Namespace))
                {
                    builder.AppendLine($"namespace {receiver.Namespace}");
                    builder.AppendLine("{");
                    builder.IncrementIndent();
                }

                builder.AppendLine("[System.Serializable]");
                builder.AppendLine("/// <inheritdoc />");
                string identifier = receiver.Interface.Identifier.ToString();
                builder.AppendLine(
                    $"public class {prefix}{identifier} : TNRD.SerializableInterface<{identifier}>, {identifier} ");
                builder.AppendLine("{");

                using (builder.Indent())
                {
                    BuildProperties(receiver, builder);
                    BuildMethods(receiver, builder);
                }

                builder.AppendLine("}");

                if (!string.IsNullOrEmpty(receiver.Namespace))
                {
                    builder.DecrementIndent();
                    builder.AppendLine("}");
                }

                Location location = receiver.Interface.GetLocation();
                if (location.Kind == LocationKind.SourceFile)
                {
                    string sourcePath = location.SourceTree.GetLineSpan(location.SourceSpan).Path;
                    string directoryName = Path.GetDirectoryName(sourcePath);
                    string fullPath = Path.Combine(directoryName, $"{prefix}{identifier}{suffix}.cs");

                    File.WriteAllText(fullPath, builder.ToString());
                }
            }
            catch (Exception e)
            {
                Debug.WriteLine(e.Message);
            }
        }

        private static void BuildUsings(InterfaceSourceGeneratorSyntaxReceiver receiver, IndentedStringBuilder builder)
        {
            if (receiver.Usings.Count <= 0) return;
            foreach (UsingDirectiveSyntax syntax in receiver.Usings)
            {
                builder.AppendLine($"using {syntax.Name.ToString()};");
            }

            builder.AppendLine();
        }

        private static void BuildProperties(InterfaceSourceGeneratorSyntaxReceiver receiver, IndentedStringBuilder builder)
        {
            if (receiver.Properties.Count == 0)
                return;

            foreach (PropertyDeclarationSyntax property in receiver.Properties)
            {
                BuildProperty(builder, property);
            }
        }

        private static void BuildProperty(IndentedStringBuilder builder, PropertyDeclarationSyntax property)
        {
            builder.AppendLine("/// <inheritdoc />");
            builder.AppendLine($"public {property.Type.ToString()} {property.Identifier.ToString()}");
            builder.AppendLine("{");

            AccessorDeclarationSyntax getAccessor =
                property.AccessorList.Accessors.FirstOrDefault(x => x.Kind() == SyntaxKind.GetAccessorDeclaration);
            if (getAccessor != null)
            {
                using (builder.Indent())
                {
                    builder.AppendLine($"get {{ return Value.{property.Identifier.ToString()}; }}");
                }
            }

            AccessorDeclarationSyntax setAccessor =
                property.AccessorList.Accessors.FirstOrDefault(x => x.Kind() == SyntaxKind.SetAccessorDeclaration);
            if (setAccessor != null)
            {
                using (builder.Indent())
                {
                    builder.AppendLine($"set {{ Value.{property.Identifier.ToString()} = value; }}");
                }
            }

            builder.AppendLine("}");
        }

        private static void BuildMethods(InterfaceSourceGeneratorSyntaxReceiver receiver, IndentedStringBuilder builder)
        {
            if (receiver.Methods.Count == 0)
                return;

            foreach (MethodDeclarationSyntax method in receiver.Methods)
            {
                BuildMethod(builder, method);
            }
        }

        private static void BuildMethod(IndentedStringBuilder builder, MethodDeclarationSyntax method)
        {
            builder.AppendLine("/// <inheritdoc />");
            if (method.Modifiers.Count == 0)
            {
                builder.Append("public ");
            }
            else
            {
                builder.Append(string.Join(" ", method.Modifiers.Select(x => x.ValueText)) + " ");
            }

            builder.Append(method.ReturnType + " ");
            builder.Append($"{method.Identifier.ValueText}");
            BuildMethodTypeParameters(builder, method);
            builder.Append("(");
            BuildMethodParameters(builder, method);
            builder.AppendLine(")");
            BuildMethodGenericConstraints(builder, method);
            builder.AppendLine("{");
            BuildMethodBody(builder, method);
            builder.AppendLine("}");
        }

        private static void BuildMethodTypeParameters(IndentedStringBuilder builder, MethodDeclarationSyntax method)
        {
            if (method.TypeParameterList == null || method.TypeParameterList.Parameters.Count == 0)
                return;

            builder.Append("<");
            builder.Append(string.Join(", ",
                method.TypeParameterList.Parameters.Select(x => x.Identifier.ValueText)));
            builder.Append(">");
        }

        private static void BuildMethodParameters(IndentedStringBuilder builder, MethodDeclarationSyntax method)
        {
            if (method.ParameterList.Parameters.Count == 0)
                return;

            IEnumerable<string> parameters =
                method.ParameterList.Parameters.Select(x => $"{x.Type.ToString()} {x.Identifier.ToString()}");
            builder.Append(string.Join(", ", parameters));
        }

        private static void BuildMethodGenericConstraints(IndentedStringBuilder builder, MethodDeclarationSyntax method)
        {
            using (builder.Indent())
            {
                foreach (TypeParameterConstraintClauseSyntax clause in method.ConstraintClauses)
                {
                    string constraints = string.Join(", ", clause.Constraints.Select(x => x.ToString()));
                    builder.AppendLine($"where {clause.Name.Identifier.ValueText} : {constraints}");
                }
            }
        }

        private static void BuildMethodBody(IndentedStringBuilder builder, MethodDeclarationSyntax method)
        {
            using (builder.Indent())
            {
                builder.Append($"Value.{method.Identifier.ValueText}");

                if (method.TypeParameterList != null && method.TypeParameterList.Parameters.Count > 0)
                {
                    builder.Append("<");
                    builder.Append(string.Join(", ",
                        method.TypeParameterList.Parameters.Select(x => x.Identifier.ValueText)));
                    builder.Append(">");
                }

                builder.Append("(");

                if (method.ParameterList.Parameters.Count > 0)
                {
                    IEnumerable<string> parameters =
                        method.ParameterList.Parameters.Select(x => x.Identifier.ToString());
                    builder.Append(string.Join(", ", parameters));
                }

                builder.AppendLine(");");
            }
        }
    }
}
